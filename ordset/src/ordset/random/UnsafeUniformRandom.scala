package ordset.random

/**
 * Generates random number sequences that follow a uniform distribution.
 * Adapter trait for external random generators libraries.
 *
 * Implementations are allowed to update internal state without synchronization.
 * So instances of [[UnsafeUniformRandom]] must be considered as <u>thread unsafe</u>.
 *
 * Trait adopted from the original interface org.apache.commons.rng.UniformRandomProvider.
 */
trait UnsafeUniformRandom {
  /**
   * Generates `byte` values and places them into a user-supplied array.
   * <p>
   * The number of random bytes produced is equal to the length of the
   * the byte array.
   * </p>
   *
   * @param bytes Byte array in which to put the random bytes.
   *              Cannot be `null`.
   */
  def nextBytes(bytes: Array[Byte]): Unit

  /**
   * Generates `byte` values and places them into a user-supplied array.
   *
   * @param bytes Array in which to put the generated bytes.
   *              Cannot be `null`.
   * @param start Index at which to start inserting the generated bytes.
   * @param len   Number of bytes to insert.
   * @throws IndexOutOfBoundsException if `start < 0` or
   *                                   `start >= bytes.length`.
   * @throws IndexOutOfBoundsException if `len < 0` or
   *                                   `len > bytes.length - start`.
   */
  def nextBytes(bytes: Array[Byte], start: Int, len: Int): Unit

  /**
   * Generates an `int` value.
   *
   * @return the next random value.
   */
  def nextInt(): Int

  /**
   * Generates an `int` value between 0 (inclusive) and the
   * specified value (exclusive).
   *
   * @param n Bound on the random number to be returned.  Must be positive.
   * @return a random `int` value between 0 (inclusive) and `n`
   *         (exclusive).
   * @throws IllegalArgumentException if `n` is negative.
   */
  def nextInt(n: Int): Int

  /**
   * Generates a `long` value.
   *
   * @return the next random value.
   */
  def nextLong(): Long

  /**
   * Generates a `long` value between 0 (inclusive) and the specified
   * value (exclusive).
   *
   * @param n Bound on the random number to be returned.  Must be positive.
   * @return a random `long` value between 0 (inclusive) and `n`
   *         (exclusive).
   * @throws IllegalArgumentException if `n` is negative.
   */
  def nextLong(n: Long): Long

  /**
   * Generates a `boolean` value.
   *
   * @return the next random value.
   */
  def nextBoolean(): Boolean

  /**
   * Generates a `float` value between 0 and 1.
   *
   * @return the next random value between 0 and 1.
   */
  def nextFloat(): Float

  /**
   * Generates a `double` value between 0 and 1.
   *
   * @return the next random value between 0 and 1.
   */
  def nextDouble(): Double
}